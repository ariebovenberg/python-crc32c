
name: Build Wheels

on:
  pull_request:
    branches:
      - main

jobs:

  build-library-ubuntu-20.04:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - name: Get C library hash
      id: get-c-lib-hash
      run:
        echo "::set-output name=hash::$(git -C google_crc32c log -n 1 --pretty=%H)"
    - uses: actions/cache@v2
      id: cache
      with:
        path: ${{ github.workspace }}/usr
        key: google_crc32c-${{ steps.get-c-lib-hash.outputs.hash }}
    - name: Build C library
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        python -m pip install --upgrade setuptools pip wheel
        python -m pip install cmake
        rm -rf google_crc32c/build
        mkdir google_crc32c/bulid
        cd google_crc32c/build
        cmake \
            -DCMAKE_BUILD_TYPE=Release \
            -DCRC32C_BUILD_TESTS=no \
            -DCRC32C_BUILD_BENCHMARKS=no \
            -DBUILD_SHARED_LIBS=yes \
            -DCMAKE_INSTALL_PREFIX:PATH=${{ github.workspace }}/usr \
            ..
    - uses: actions/upload-artifact@v2
      with:
        name: google_crc32c-c-library-ubuntu-20.04
        path: ${{ github.workspace }}/usr

  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    strategy:
      matrix:
        os:
        - ubuntu-20.04
       #- maccos-10.15
       #- windows-2019
    needs:
      - build-library-${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - name: Download the library
      uses: actions/download-artifact@v2
      with:
        name: google_crc32c-c-library-${{ matrix.os }}
        path: ${{ github.workspace }}/usr
    - name: Build Wheels
      uses: pypa/cibuildwheel@v2.1.1
      env:
        CIBW_ENVIRONMENT: CRC32C_INSTALL_PREFIX=$(( github.workspacej }}/usr
    - uses: actions/upload-artifact@v2
      with:
        name: python-package-distributions
        path: ./wheels/google_crc32c*.whl
